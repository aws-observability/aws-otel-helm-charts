nameOverride: ""
fullnameOverride: ""
global:
  namespaceOverride: ""
awsRegion: ""
clusterName: ""

# -- Additional labels to add into metadata
additionalLabels: {}
  # app: adot

serviceAccount:
  create: true
  annotations: {}
  name: ""
fluentbit:
  enabled: true
  namespaceOverride: ""
  name: "fluent-bit"
  configName: "fluent-bit-config"
  namespace: "amazon-cloudwatch"
  serviceAccount:
    name: "fluent-bit"
    annotations: {}
  imdsVersion: v1
  image:
    repository: "amazon/aws-for-fluent-bit"
    tag: "2.21.1"
    pullPolicy: "Always"
  input:
    applicationLog:
      tag: "application.*"
      excludePath: "/var/log/containers/cloudwatch-agent*, /var/log/containers/fluent-bit*, /var/log/containers/aws-node*, /var/log/containers/kube-proxy*"
      path: "/var/log/containers/*.log"
      dockerMode: "On"
      dockerModeFlush: 5
      parser: "docker"
      dockerModeParser: "container_firstline"
      db: "/var/fluent-bit/state/flb_container.db"
      memBufLimit: "50MB"
      skipLongLines: "On"
      refreshInterval: 10
      rotateWait: 30
      storageType: "filesystem"
      fluentbit:
        path: "/var/log/containers/fluent-bit*"
        db: "/var/fluent-bit/state/flb_log.db"
        memBufLimit: "5MB"
    dataplaneLog:
      systemd:
        tag: "dataplane.systemd.*"
        dockerUnit: "_SYSTEMD_UNIT=docker.service"
        kubeletUnit: "_SYSTEMD_UNIT=kubelet.service"
        db: "/var/fluent-bit/state/systemd.db"
        path: "/var/log/journal"
      tail:
        tag: "dataplane.tail.*"
        path: "/var/log/containers/aws-node*, /var/log/containers/kube-proxy*"
        dockerMode: "On"
        dockerModeFlush: 5
        parser: "docker"
        dockerModeParser: "container_firstline"
        db: "/var/fluent-bit/state/flb_dataplane_tail.db"
        memBufLimit: "50MB"
        skipLongLines: "On"
        refreshInterval: 10
        rotateWait: 30
        storageType: "filesystem"
    hostLog:
      dmesg:
        tag: "host.dmesg"
        path: "/var/log/dmesg"
        db: "/var/fluent-bit/state/flb_dmesg.db"
      messages:
        tag: "host.messages"
        path: "/var/log/messages"
        db: "/var/fluent-bit/state/flb_messages.db"
      secure:
        tag: "host.secure"
        path: "/var/log/secure"
        db: "/var/fluent-bit/state/flb_secure.db"
      parser: "syslog"
      memBufLimit: "5MB"
      skipLongLines: "On"
      refreshInterval: 10
  output:
    applicationLog:
      log_retention:
        enabled: false
        days: 30
    dataplaneLog:
      log_retention:
        enabled: false
        days: 30
    hostLog:
      log_retention:
        enabled: false
        days: 30
  kubernetesFilter:
    match: "application.*"
    kubeURL: "https://kubernetes.default.svc:443"
    kubeTagPrefix: "application.var.log.containers."
    mergeLog: "On"
    mergeLogKey: "log_processed"
    k8sLoggingParser: "On"
    k8sLoggingExclude: "Off"
    labels: "Off"
    annotations: "Off"
  resources:
    limits:
      memory: "200Mi"
    requests:
      cpu: "500m"
      memory: "100Mi"
  volumeMounts:
    - name: "fluentbitstate"
      mountPath: "/var/fluent-bit/state"
    - name: "varlog"
      mountPath: "/var/log"
      readOnly: true
    - name: "varlibdockercontainers"
      mountPath: "/var/lib/docker/containers"
      readOnly: true
    - name: "fluent-bit-config"
      mountPath: "/fluent-bit/etc/"
    - name: "runlogjournal"
      mountPath: "/run/log/journal"
      readOnly: true
    - name: "dmesg"
      mountPath: "/var/log/dmesg"
      readOnly: true
  volumes:
    - name: "fluentbitstate"
      hostPath:
        path: "/var/fluent-bit/state"
    - name: "varlog"
      hostPath:
        path: "/var/log"
    - name: "varlibdockercontainers"
      hostPath:
        path: "/var/lib/docker/containers"
    - name: "fluent-bit-config"
      configMap:
        name: "fluent-bit-config"
    - name: "runlogjournal"
      hostPath:
        path: "/run/log/journal"
    - name: "dmesg"
      hostPath:
        path: "/var/log/dmesg"
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"
    - operator: "Exists"
      effect: "NoExecute"
    - operator: "Exists"
      effect: "NoSchedule"
  env:
    httpServer: "On"
    httpPort: "2020"
    readFromHead: false
    readFromTail: "On"

fargateLog:
  enabled: false
  name: "amazon-logging"
  namespace: "aws-observability"
  awsObservability: "enabled"
  outputConf:
    name: "cloudwatch_logs"
    match: "*"
    logGroupName: "fluent-bit-cloudwatch"
    logStreamPrefix: "from-fluent-bit-"
    autoCreateGroup: true
  parsersConf:
    name: "crio"
    timeKey: "time"
    timeFormat: "%Y-%m-%dT%H:%M:%S.%L%z"
  filtersConf:
    name: "parser"
    match: "*"
    keyName: "log"
    parser: "crio"
    reserveData: "On"
    preserveKey: true

adotCollector:
  image:
    name: "aws-otel-collector"
    repository: "amazon/aws-otel-collector"
    tag: "v0.21.1"
    daemonSetPullPolicy: "IfNotPresent"
    sidecarPullPolicy: "Always"
  daemonSet:
    enabled: true
    daemonSetName: "adot-collector-daemonset"
    createNamespace: true
    namespace: "amazon-metrics"
    namespaceOverride: ""
    serviceAccount:
      create: true
      name: "adot-collector-sa"
      annotations: {}
    clusterRoleName: "adot-collector-role"
    clusterRoleBindingName: "adot-collector-role-binding"
    configMap:
      name: "adot-conf"
      app: "opentelemetry"
      component: "adot-conf"
    containersName: "adot-collector-container"
    env:
      - name: "K8S_NODE_NAME"
        valueFrom:
          fieldRef:
            fieldPath: "spec.nodeName"
      - name: "HOST_IP"
        valueFrom:
          fieldRef:
            fieldPath: "status.hostIP"
      - name: "K8S_POD_NAME"
        valueFrom:
          fieldRef:
            fieldPath: "metadata.name"
      - name: "HOST_NAME"
        valueFrom:
          fieldRef:
            fieldPath: "spec.nodeName"
      - name: "K8S_NAMESPACE"
        valueFrom:
          fieldRef:
            fieldPath: "metadata.namespace"
    command:
      - "/awscollector"
      - "--config=/conf/adot-config.yaml"
    resources:
      limits:
        cpu: "200m"
        memory: "200Mi"
      requests:
        cpu: "200m"
        memory: "200Mi"
    volumes:
      - configMap:
          name: "adot-conf"
          items:
            - key: "adot-config"
              path: "adot-config.yaml"
        name: "adot-config-vol"
      - name: "rootfs"
        hostPath:
          path: "/"
      - name: "dockersock"
        hostPath:
          path: "/var/run/docker.sock"
      - name: "varlibdocker"
        hostPath:
          path: "/var/lib/docker"
      - name: "containerdsock"
        hostPath:
          path: "/run/containerd/containerd.sock"
      - name: "sys"
        hostPath:
          path: "/sys"
      - name: "devdisk"
        hostPath:
          path: "/dev/disk/"
    volumeMounts:
      - name: "rootfs"
        mountPath: "/rootfs"
        readOnly: true
      - name: "dockersock"
        mountPath: "/var/run/docker.sock"
        readOnly: true
      - name: "varlibdocker"
        mountPath: "/var/lib/docker"
        readOnly: true
      - name: "containerdsock"
        mountPath: "/run/containerd/containerd.sock"
        readOnly: true
      - name: "sys"
        mountPath: "/sys"
        readOnly: true
      - name: "devdisk"
        mountPath: "/dev/disk"
        readOnly: true
      - name: "adot-config-vol"
        mountPath: "/conf"
    extensions:
      healthCheck: ""
      sigv4auth:
        region: ""
    cwreceivers:
      collectionInterval: ""
      containerOrchestrator: ""
      addServiceAsAttribute: ""
      preferFullPodName: ""
      addFullPodNameMetricLabel: ""
    processors:
      timeout: 60s
    cwexporters:
      namespace: "ContainerInsights"
      logGroupName: ""
      logStreamName: "InputNodeName"
      enabled: true
      dimensionRollupOption: "NoDimensionRollup"
      parseJsonEncodedAttrValues: ["Sources", "kubernetes"]
    metricDeclarations: |
      # node metrics
      - dimensions: [[NodeName, InstanceId, ClusterName]]
        metric_name_selectors:
          - node_cpu_utilization
          - node_memory_utilization
          - node_network_total_bytes
          - node_cpu_reserved_capacity
          - node_memory_reserved_capacity
          - node_number_of_running_pods
          - node_number_of_running_containers
      - dimensions: [[ClusterName]]
        metric_name_selectors:
          - node_cpu_utilization
          - node_memory_utilization
          - node_network_total_bytes
          - node_cpu_reserved_capacity
          - node_memory_reserved_capacity
          - node_number_of_running_pods
          - node_number_of_running_containers
          - node_cpu_usage_total
          - node_cpu_limit
          - node_memory_working_set
          - node_memory_limit
      # pod metrics
      - dimensions: [[PodName, Namespace, ClusterName], [Service, Namespace, ClusterName], [Namespace, ClusterName], [ClusterName]]
        metric_name_selectors:
          - pod_cpu_utilization
          - pod_memory_utilization
          - pod_network_rx_bytes
          - pod_network_tx_bytes
          - pod_cpu_utilization_over_pod_limit
          - pod_memory_utilization_over_pod_limit
      - dimensions: [[PodName, Namespace, ClusterName], [ClusterName]]
        metric_name_selectors:
          - pod_cpu_reserved_capacity
          - pod_memory_reserved_capacity
      - dimensions: [[PodName, Namespace, ClusterName]]
        metric_name_selectors:
          - pod_number_of_container_restarts
      # cluster metrics
      - dimensions: [[ClusterName]]
        metric_name_selectors:
          - cluster_node_count
          - cluster_failed_node_count
      # service metrics
      - dimensions: [[Service, Namespace, ClusterName], [ClusterName]]
        metric_name_selectors:
          - service_number_of_running_pods
      # node fs metrics
      - dimensions: [[NodeName, InstanceId, ClusterName], [ClusterName]]
        metric_name_selectors:
          - node_filesystem_utilization
      # namespace metrics
      - dimensions: [[Namespace, ClusterName], [ClusterName]]
        metric_name_selectors:
          - namespace_number_of_running_pods
    ampreceivers:
      scrapeInterval: 15s
      scrapeTimeout: 10s
      scrapeConfigs: |
            - job_name: 'k8s_metrics_scrape'
              sample_limit: 10000
              metrics_path: /metrics
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  action: replace
                  regex: (.+)
                  target_label: __metrics_path__
                - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $$1:$$2
                  target_label: __address__
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: keep
                  regex: ${K8S_NODE_NAME}
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: K8S_NAMESPACE
                - source_labels: [__meta_kubernetes_pod_name]
                  action: replace
                  target_label: K8S_POD_NAME
                - source_labels: [__meta_kubernetes_pod_container_name]
                  action: replace
                  target_label: EKS_Container

    ampexporters:
      namespaces: ""
      endpoint: ""
      resourcetootel: false
      authenticator: "sigv4auth"
    service:
      metrics:
        receivers: ["prometheus"]
        processors: ["batch/metrics"]
        exporters: ["prometheusremotewrite"]
      extensions: ["health_check", "sigv4auth"]

  sidecar:
    enabled: false
    name: "adot-sidecar"
    namespace: "adot-sidecar-namespace"
    namespaceOverride: ""
    regionS3: ""
    replicas: 1
    image:
      name: ""
      repository: ""
      tag: ""
      pullPolicy: ""
    resources:
      limits:
        cpu: "256m"
        memory: "512Mi"
      requests:
        cpu: "32m"
        memory: "24Mi"
